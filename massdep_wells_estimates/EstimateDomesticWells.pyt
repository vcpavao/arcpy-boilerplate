# -*- coding: utf-8 -*-import arcpyimport osfrom arcpy import envimport pandas as pdimport stringclass Toolbox:    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "MADEP Domestic Wells Toolbox"        self.alias = "madep-domestic-wells-toolbox"        # List of tool classes associated with this toolbox        self.tools = [GenerateEligibleParcels, FilterEligibleParcels, DissolveOutput]class GenerateEligibleParcels:    def __init__(self):        self.label = "Generate Eligible Parcels"    def getParameterInfo(self):        """Define the tool parameters."""        input_parcels = arcpy.Parameter(displayName = "Input Parcel Features",                                  name = "input_parcels",                                  datatype="GPFeatureLayer",                                  parameterType="Required",                                  direction="input")        input_structures = arcpy.Parameter(displayName = "Input Structure Features",                                     name = "input_structures",                                     datatype="GPFeatureLayer",                                     parameterType="Required",                                     direction="input")        output_features = arcpy.Parameter(displayName = "Output Features",                                          name = "output_features",                                          datatype = "GPFeatureLayer",                                          parameterType="Required",                                          direction="output")        input_parcels.filter.list = ["Polygon"]        input_structures.filter.list = ["Polygon"]        params = [input_parcels, input_structures, output_features]        return params    def isLicensed(self):        """Set whether the tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        return    def execute(self, parameters, messages):        arcpy.env.overwriteOutput = True        arcpy.env.workspace = r"C:\Users\vpavao\Documents\L3_data"                east_parc = parameters[0].valueAsText        structs = parameters[1].valueAsText                res_file = pd.ExcelFile(r"C:\Users\vpavao\Documents\Task3\Appendix N-queries\residential_use_codes.xlsx")        unc_file = pd.ExcelFile(r"C:\Users\vpavao\Documents\Task3\Appendix N-queries\uncertain_use_codes.xlsx")        dev_land_file = pd.ExcelFile(r"C:\Users\vpavao\Documents\Task3\Appendix N-queries\developable_land_use_codes.xlsx")        bldg_style_file = pd.ExcelFile(r"C:\Users\vpavao\Documents\Task3\Appendix N-queries\residential_styles.xlsx")        city_query_file = pd.ExcelFile(r"C:\Users\vpavao\Documents\Task3\Appendix N-queries\city_query.xlsx")                res_df = res_file.parse('resi use code query')        unc_df = unc_file.parse('uncertain use codes')        dev_df = dev_land_file.parse('developable_land')        bldg_df = bldg_style_file.parse('GREEN STYLES')        city_df = city_query_file.parse('Sheet1')        res_codes_raw = res_df["Residential use codes"].tolist()        unc_codes_raw = unc_df["Uncertain Use Codes"].tolist()        dev_codes_raw = dev_df['Residential "developable land" use codes'].tolist()        bldg_codes_raw = bldg_df["Residential styles to query in Step 7 of the methodology"].tolist()        city_query = city_df["TOWN"].tolist()                res_codes = []        ###  Assume all codes from table are strings; remove doubly-wrapped quotes        for num in res_codes_raw:            c = num.replace('"', '')            cd = c.replace('\'', '')            res_codes.append(cd)        unc_codes = []        for num in unc_codes_raw:            c = num.replace('"', '')            cd = c.replace('\'', '')            unc_codes.append(cd)        dev_codes = []        for num in dev_codes_raw:            c = num.replace('"', '')            cd = c.replace('\'', '')            dev_codes.append(cd)        layer_name_temp_east = "Parcels_Temp"        arcpy.management.MakeFeatureLayer(east_parc, layer_name_temp_east)        #res_output_name_east = "Residential-Parcels-east"        res_working_output_east = "MA-Parcels-No-Residential-east"        def filter_study_parcels(layer, filterCodes, query_attr, output_name, switchSel, opposite_output_name):             for code in filterCodes:                print(code)                where_clause = query_attr + " = '{}'".format(code)                arcpy.management.SelectLayerByAttribute(layer, "ADD_TO_SELECTION", where_clause)            arcpy.management.CopyFeatures(layer, output_name)                        if(switchSel):                arcpy.management.SelectLayerByAttribute(layer, "SWITCH_SELECTION")                arcpy.management.CopyFeatures(layer, opposite_output_name)            arcpy.management.SelectLayerByAttribute(layer, "CLEAR_SELECTION")        def filter_parcels_by_condition(layerName, outputLayerName, where_clause, switchSel, oppositeOutputName):            arcpy.management.SelectLayerByAttribute(layerName, "ADD_TO_SELECTION", where_clause)            arcpy.management.CopyFeatures(layerName, outputLayerName)                        if(switchSel):                arcpy.management.SelectLayerByAttribute(layerName, "SWITCH_SELECTION")                arcpy.management.CopyFeatures(layerName, oppositeOutputName)            arcpy.management.SelectLayerByAttribute(layerName, "CLEAR_SELECTION")        res_output_name_east = parameters[2].valueAsText        filter_study_parcels(layer_name_temp_east, res_codes, "USE_CODE", res_output_name_east, True, res_working_output_east)        unc_output_name_east = "Uncertain-Parcels-Pre-Filter-east"        unc_filter_output_east = "Uncertain-Parcels-Filtered-east"        unc_working_output_east = "Uncertain-Parcels-Working-Output"        def generate_uncertain_layers():            filter_study_parcels(res_working_output_east, unc_codes, "USE_CODE", unc_output_name_east, True, unc_working_output_east)                        filter_parcels_by_condition(unc_output_name_east, unc_filter_output_east, "BLD_AREA - RES_AREA > 0", False, "")            arcpy.management.Delete([unc_output_name_east])                    generate_uncertain_layers()        structs_lyr = "structures"        structs_over_50sqm = "structs_over_50sqm"        arcpy.management.MakeFeatureLayer(structs, structs_lyr)        dev_filter_output_east = "MA-Dev-Parcels-east"        dev_output_name_east = "Developable-W-2D-structs-east"        dev_code_working_output_east = "Parcels-NotFilteredbyDevelopableCode-east"        def query_developable_land(layer1, layer2, output_name):            arcpy.management.SelectLayerByLocation(layer1, "CONTAINS", layer2, "","NEW_SELECTION")            arcpy.management.CopyFeatures(layer1, output_name)            arcpy.management.SelectLayerByAttribute(layer1, "CLEAR_SELECTION")        def generate_developable_layers():            filter_study_parcels(unc_working_output_east, dev_codes, "USE_CODE", dev_filter_output_east, True, dev_code_working_output_east)            filter_parcels_by_condition(structs_lyr, structs_over_50sqm, "SHAPE_AREA > 50", False, "")            query_developable_land(dev_filter_output_east, structs_over_50sqm, dev_output_name_east)                    generate_developable_layers()        def create_res_styles_layer(layer, styles, outputLyr, switchSel, oppositeOutputLyr):            for style in styles:                where_clause = "STYLE = '{}'".format(style)                arcpy.management.SelectLayerByAttribute(layer, "ADD_TO_SELECTION", where_clause)            arcpy.management.CopyFeatures(layer, outputLyr)            if(switchSel):                arcpy.management.SelectLayerByAttribute(layer, "SWITCH_SELECTION")                arcpy.management.CopyFeatures(layer, oppositeOutputLyr)            arcpy.management.SelectLayerByAttribute(layer, "CLEAR_SELECTION")        building_style_layer_east = "Residential-Style-Parcels-east"        final_parcels_east = "MA-Working-Parcels-east"        create_res_styles_layer(dev_code_working_output_east, bldg_codes_raw, building_style_layer_east, True, final_parcels_east)        def delete_temp_layers():            arcpy.management.Delete([                layer_name_temp_east,                final_parcels_east,                unc_working_output_east,                res_working_output_east,                dev_filter_output_east,                structs_lyr            ])        delete_temp_layers()        ma_resi_parcels = parameters[2].valueAsText        def merge_east_west():            arcpy.management.Merge([dev_output_name_east, unc_filter_output_east, res_output_name_east, building_style_layer_east], ma_resi_parcels)            arcpy.management.Delete([dev_output_name_east, unc_filter_output_east, res_output_name_east, building_style_layer_east])        merge_east_west()            def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        returnclass FilterEligibleParcels:    def __init__(self):        self.label = "Filter Eligible Parcels"    def getParameterInfo(self):        """Define the tool parameters."""        input_parcels = arcpy.Parameter(displayName = "Eligible Parcel Features",                                  name = "input_parcels",                                  datatype="GPFeatureLayer",                                  parameterType="Required",                                  direction="input")        structs_lyr = arcpy.Parameter(displayName = "Structures",                                  name = "structs_lyr",                                  datatype="GPFeatureLayer",                                  parameterType="Required",                                  direction="input")        pws_service_areas = arcpy.Parameter(displayName = "PWS Service Areas",                                     name = "pws_service_areas",                                     datatype="GPFeatureLayer",                                     parameterType="Required",                                     direction="input")        pws_source_layer = arcpy.Parameter(displayName = "PWS Sources",                                         name = "pws_sources",                                         datatype="GPFeatureLayer",                                         parameterType="Required",                                         direction="input")        wlv_points_lyr = arcpy.Parameter(displayName = "Verified Well Points (WLV)",                                          name = "wlv_points",                                          datatype = "GPFeatureLayer",                                          parameterType="Required",                                          direction="input")        output_features = arcpy.Parameter(displayName = "Output Features",                                          name = "output_features",                                          datatype = "GPFeatureLayer",                                          parameterType="Required",                                          direction="output")        input_parcels.filter.list = ["Polygon"]        pws_service_areas.filter.list = ["Polygon"]        pws_source_layer.filter.list = ["Point"]        wlv_points_lyr.filter.list = ["Point"]        params = [input_parcels, structs_lyr, pws_service_areas, pws_source_layer, wlv_points_lyr, output_features]        return params    def isLicensed(self):        """Set whether the tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        return    def execute(self, parameters, messages):        arcpy.env.overwriteOutput = True        arcpy.env.workspace = r"C:\Users\vpavao\Documents\L3_data"                ma_resi_parcels = parameters[0].valueAsText        structs_lyr = parameters[1].valueAsText        pws_service_areas = parameters[2].valueAsText        pws_source_layer = parameters[3].valueAsText        wlv_points_lyr = parameters[4].valueAsText                def query_from_pws(layer1, layer2, output_name):            arcpy.management.SelectLayerByLocation(layer1, "INTERSECT", layer2,"","NEW_SELECTION")            arcpy.management.SelectLayerByAttribute(layer1,"SWITCH_SELECTION")            arcpy.management.CopyFeatures(layer1, output_name)            arcpy.management.SelectLayerByAttribute(layer1, "CLEAR_SELECTION")        parcels_outside_pws_output = "15_Resi_Parcels_No_PWS_Zones"        query_from_pws(ma_resi_parcels, pws_service_areas, parcels_outside_pws_output)        output_layer_16 = "16_Resi_Parcels_No_PWS_Points"        def filter_parcels_with_pws_source():                arcpy.management.SelectLayerByLocation(parcels_outside_pws_output, "INTERSECT", pws_source_layer,"","NEW_SELECTION")                arcpy.management.SelectLayerByAttribute(parcels_outside_pws_output,"SWITCH_SELECTION")                arcpy.management.CopyFeatures(parcels_outside_pws_output, output_layer_16)                arcpy.management.SelectLayerByAttribute(parcels_outside_pws_output, "CLEAR_SELECTION")        filter_parcels_with_pws_source()        output_layer_17 = "17_Resi_Parcels"        output_layer_17a = "17a_Filtered_Parcels"        output_layer_17b = "17b_Filtered_Parcels"        output_layer_17c = "17c_Filtered_Parcels"        def filter_misc_parcels():            arcpy.management.SelectLayerByLocation(output_layer_16, "INTERSECT", structs_lyr,"","NEW_SELECTION")            arcpy.management.SelectLayerByAttribute(output_layer_16, "SWITCH_SELECTION")                where_clause_1 = "STYLE = '' AND BLD_AREA = 0 AND RES_AREA = 0 AND ADDR_NUM = '0'"            arcpy.management.SelectLayerByAttribute(output_layer_16, "SUBSET_SELECTION", where_clause_1)            arcpy.management.SelectLayerByAttribute(output_layer_16, "SWITCH_SELECTION")            arcpy.management.CopyFeatures(output_layer_16, output_layer_17a)            arcpy.management.SelectLayerByAttribute(output_layer_16, "CLEAR_SELECTION")            arcpy.management.SelectLayerByLocation(output_layer_17a, "INTERSECT", structs_lyr,"","NEW_SELECTION")            arcpy.management.SelectLayerByAttribute(output_layer_17a, "SWITCH_SELECTION")            filterCodes = ['013', '014', '016', '0160', '017', '0170', '018', '0180', '959', '9590', '1333', '071']            for code in filterCodes:                print(code)                where_clause_2 = "USE_CODE = '{}'".format(code)                arcpy.management.SelectLayerByAttribute(output_layer_17a, "SUBSET_SELECTION", where_clause_2)            arcpy.management.SelectLayerByAttribute(output_layer_17a, "SUBSET_SELECTION", "YEAR_BUILT < 2015")            arcpy.management.SelectLayerByAttribute(output_layer_17a, "SWITCH_SELECTION")            arcpy.management.CopyFeatures(output_layer_17a, output_layer_17b)            arcpy.management.SelectLayerByAttribute(output_layer_17a, "CLEAR_SELECTION")            filterCodes2 = ['101', '1010', '102', '1020', '103', '1040', '109', '1090', '130', '1300', '131', '1310']            for code in filterCodes2:                print(code)                where_clause_3 = "USE_CODE = '{}'".format(code)                arcpy.management.SelectLayerByAttribute(output_layer_17b, "ADD_TO_SELECTION", where_clause_3)            arcpy.management.SelectLayerByAttribute(output_layer_17b, "SWITCH_SELECTION")            where_clause_4 = "RES_AREA = 0 AND ADDR_NUM = '0'"            arcpy.management.SelectLayerByAttribute(output_layer_17b, "SUBSET_SELECTION", where_clause_4)            arcpy.management.SelectLayerByAttribute(output_layer_17b, "SWITCH_SELECTION")            arcpy.management.CopyFeatures(output_layer_17b, output_layer_17c)            arcpy.management.SelectLayerByAttribute(output_layer_17b, "CLEAR_SELECTION")                        where_clause_5 = "STYLE = 'Outbuildings' And NOT CITY = 'REHOBOTH'"            arcpy.management.SelectLayerByAttribute(output_layer_17c, "NEW_SELECTION", where_clause_5)            arcpy.management.SelectLayerByAttribute(output_layer_17c, "SWITCH_SELECTION")            arcpy.management.CopyFeatures(output_layer_17c, output_layer_17)            arcpy.management.SelectLayerByAttribute(output_layer_17c, "CLEAR_SELECTION")            filter_misc_parcels()        output_layer_18 = parameters[5].valueAsText        def add_verified_wells():            wlv_points_lyr_domestic = "WLV_Points_2023_Domestic"            wlv_parcels_lyr = "WLV_Confirmed_Well_Parcels"            arcpy.management.SelectLayerByAttribute(wlv_points_lyr, "NEW_SELECTION", "Well_Type = 'Domestic' AND Registrati = 'Active'")            arcpy.management.CopyFeatures(wlv_points_lyr, wlv_points_lyr_domestic)            arcpy.management.SelectLayerByAttribute(wlv_points_lyr, "CLEAR_SELECTION")            arcpy.management.SelectLayerByLocation(in_layer = ma_resi_parcels,                                                   overlap_type = "INTERSECT",                                                   select_features = wlv_points_lyr_domestic,                                                   selection_type = "NEW_SELECTION")            arcpy.management.CopyFeatures(ma_resi_parcels, wlv_parcels_lyr)            arcpy.management.SelectLayerByAttribute(ma_resi_parcels, "CLEAR_SELECTION")            arcpy.management.Delete([wlv_points_lyr])            arcpy.management.Merge([output_layer_17, wlv_parcels_lyr], output_layer_18)            arcpy.management.DeleteIdentical(output_layer_18, ["LOC_ID"])                    add_verified_wells()            def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        returnclass DissolveOutput:    def __init__(self):        self.label = "Dissolve Parcels"    def getParameterInfo(self):        """Define the tool parameters."""        input_parcels = arcpy.Parameter(displayName = "Input Parcel Features",                                  name = "input_parcels",                                  datatype="GPFeatureLayer",                                  parameterType="Required",                                  direction="input")        majbasins = arcpy.Parameter(displayName = "Major Basins Features",                                     name = "majbasins",                                     datatype="GPFeatureLayer",                                     parameterType="Required",                                     direction="input")        subbasins = arcpy.Parameter(displayName = "Major Basins Features",                                     name = "subbasins",                                     datatype="GPFeatureLayer",                                     parameterType="Required",                                     direction="input")        output_by_majbasins = arcpy.Parameter(displayName = "Output Features Dissolved by Major Basins",                                          name = "output_by_majbasins",                                          datatype = "GPFeatureLayer",                                          parameterType="Required",                                          direction="output")        output_by_subbasins = arcpy.Parameter(displayName = "Output Layer Dissolved by Subbasins",                                              name = "output_by_subbasins",                                              datatype = "GPFeatureLayer",                                              parameterType="Required",                                              direction="output")        output_by_towns = arcpy.Parameter(displayName = "Output Layer Dissolved by Towns",                                              name = "output_by_towns",                                              datatype = "GPFeatureLayer",                                              parameterType="Required",                                              direction="output")        input_parcels.filter.list = ["Polygon"]        majbasins.filter.list = ["Polygon"]        subbasins.filter.list = ["Polygon"]        output_by_majbasins.filter.list = ["Polygon"]        output_by_subbasins.filter.list = ["Polygon"]        output_by_towns.filter.list = ["Polygon"]        params = [input_parcels, majbasins, subbasins, output_by_majbasins, output_by_subbasins, output_by_towns]        return params    def isLicensed(self):        """Set whether the tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        return    def execute(self, parameters, messages):        arcpy.env.overwriteOutput = True        output_layer_17 = parameters[0].valueAsText        major_basins_lyr = parameters[1].valueAsText        subbasins_lyr = parameters[2].valueAsText        majbasins_output = parameters[3].valueAsText        subbasins_output = parameters[4].valueAsText        towns_output = parameters[5].valueAsText        # Join parcels with major basins and then dissolve        arcpy.analysis.SpatialJoin(output_layer_17, major_basins_lyr, output_layer_17 + "_MajBas_join", "JOIN_ONE_TO_ONE",        "KEEP_ALL", "", "INTERSECT")        arcpy.management.Dissolve(output_layer_17 + "_MajBas_join", majbasins_output, "NAME")        #Join parcels with sub-basins and then dissolve        arcpy.analysis.SpatialJoin(output_layer_17, subbasins_lyr, output_layer_17 + "_SubBas_join", "JOIN_ONE_TO_ONE",        "KEEP_ALL", "", "INTERSECT")        arcpy.management.Dissolve(output_layer_17 + "_SubBas_join", subbasins_output, "SUB_ID")        arcpy.management.Dissolve(output_layer_17, towns_output, "CITY")        def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return